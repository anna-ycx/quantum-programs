def deutsch_jozsa[n:!ℕ](f: const int[n] !→ lifted 𝔹):!𝔹{
  qubits := 0:int[n];
  for i in [0..n) { qubits[i] := H(qubits[i]); }
  target := H(1: 𝔹);
  if f(qubits) { target := X(target); }
  measure(target);
  for i in [0..n) { qubits[i] := H(qubits[i]); }
  result := measure(qubits);
  return result==0;
}

def balanced[n:!ℕ](x:int[n])lifted:𝔹 { 
  result := 0:𝔹;
  for i in [0..n) {
    if (x[i] == 1) { result := X(result); }
  }
  return result;
}

def constant[n:!ℕ](x:int[n])lifted:𝔹 { return 1:𝔹; }

def main() {
  x := deutsch_jozsa(constant[2]);
}